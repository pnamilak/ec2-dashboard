name: Deploy EC2 Dashboard

on:
  workflow_dispatch:
    inputs:
      ACTION:
        description: "What do you want to do?"
        type: choice
        options: [apply, destroy]
        default: apply
        required: true
      AWS_REGION:
        description: "AWS Region"
        required: true
        default: "us-east-2"
      BACKEND_BUCKET:
        description: "Terraform state S3 bucket"
        required: true
        default: "mypersonalaws-tfstate-us-east-2"
      BACKEND_TABLE:
        description: "Terraform lock DynamoDB table"
        required: true
        default: "mypersonalaws-tf-locks"
      WEBSITE_BUCKET_NAME:
        description: "(Optional) existing S3 bucket for site"
        required: false
        default: ""
      ALLOWED_EMAIL_DOMAIN:
        description: "Allowed OTP email domain"
        required: true
        default: "gmail.com"
      SES_SENDER_EMAIL:
        description: "SES sender (must be verified in this region)"
        required: true
        default: "noreplyzingamazigle@gmail.com"
      ATTACH_SSM_PROFILE:
        description: "Attach SSM instance profile to EC2s (by Name matching envs)"
        type: choice
        options: [none, running, stopped, both]
        default: running
        required: true

jobs:
  deploy:
    environment: mypersonalAWS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      BACKEND_BUCKET: ${{ github.event.inputs.BACKEND_BUCKET }}
      BACKEND_TABLE:  ${{ github.event.inputs.BACKEND_TABLE }}
      WEBSITE_BUCKET_NAME: ${{ github.event.inputs.WEBSITE_BUCKET_NAME }}
      ALLOWED_EMAIL_DOMAIN: ${{ github.event.inputs.ALLOWED_EMAIL_DOMAIN }}
      SES_SENDER_EMAIL: ${{ github.event.inputs.SES_SENDER_EMAIL }}
      ATTACH_SSM_PROFILE: ${{ github.event.inputs.ATTACH_SSM_PROFILE }}
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install AWS CLI v2
        run: |
          curl -sS "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Ensure backend S3 bucket exists
        shell: bash
        run: |
          set -e
          if aws s3api head-bucket --bucket "$BACKEND_BUCKET" 2>/dev/null; then
            echo "State bucket exists"
          else
            echo "Creating state bucket $BACKEND_BUCKET"
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BACKEND_BUCKET"
            else
              aws s3api create-bucket --bucket "$BACKEND_BUCKET" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
            aws s3api put-bucket-versioning --bucket "$BACKEND_BUCKET" --versioning-configuration Status=Enabled
          fi

      - name: Ensure DynamoDB lock table exists
        shell: bash
        run: |
          set -e
          if aws dynamodb describe-table --table-name "$BACKEND_TABLE" >/dev/null 2>&1; then
            echo "Lock table exists"
          else
            echo "Creating lock table $BACKEND_TABLE"
            aws dynamodb create-table \
              --table-name "$BACKEND_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name "$BACKEND_TABLE"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (S3 backend)
        shell: bash
        run: |
          terraform init \
            -backend-config="bucket=$BACKEND_BUCKET" \
            -backend-config="key=state/terraform.tfstate" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$BACKEND_TABLE"

      # ---------- APPLY ----------
      - name: Terraform Apply
        if: ${{ github.event.inputs.ACTION == 'apply' }}
        shell: bash
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_allowed_email_domain: ${{ env.ALLOWED_EMAIL_DOMAIN }}
          TF_VAR_ses_sender_email: ${{ env.SES_SENDER_EMAIL }}
          TF_VAR_website_bucket_name: ${{ env.WEBSITE_BUCKET_NAME }}
          TF_VAR_assign_profile_target: ${{ env.ATTACH_SSM_PROFILE }}
        run: |
          terraform apply -auto-approve
      - name: Upload login HTML/JS
        run: |
          aws s3 cp html/login.html s3://$SITE_BUCKET/login.html \
            --content-type text/html \
            --cache-control "no-store, no-cache, must-revalidate, max-age=0"

          aws s3 cp html/login.js s3://$SITE_BUCKET/login.js \
            --content-type application/javascript \
            --cache-control "no-store, no-cache, must-revalidate, max-age=0"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*"

      - name: CloudFront Invalidate (after apply)
        if: ${{ github.event.inputs.ACTION == 'apply' }}
        shell: bash
        run: |
          set -e
          CF_DOMAIN=$(terraform output -raw cloudfront_domain || true)
          if [ -n "$CF_DOMAIN" ]; then
            DIST_ID=$(aws cloudfront list-distributions \
              --query "DistributionList.Items[?DomainName=='$CF_DOMAIN'].Id | [0]" --output text)
            if [ "$DIST_ID" != "None" ]; then
              aws cloudfront create-invalidation --distribution-id "$DIST_ID" --paths "/*"
            fi
          fi

      # ---------- DESTROY ----------
      - name: Try to empty website bucket (best-effort)
        if: ${{ github.event.inputs.ACTION == 'destroy' }}
        shell: bash
        continue-on-error: true
        run: |
          set -e
          BUCKET=$(terraform output -raw website_bucket 2>/dev/null || true)
          if [ -n "$BUCKET" ]; then
            echo "Attempting to empty s3://$BUCKET ..."
            aws s3 rm "s3://$BUCKET" --recursive || true
          else
            echo "No website_bucket output (maybe never applied)."
          fi

      - name: Terraform Destroy
        if: ${{ github.event.inputs.ACTION == 'destroy' }}
        shell: bash
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_allowed_email_domain: ${{ env.ALLOWED_EMAIL_DOMAIN }}
          TF_VAR_ses_sender_email: ${{ env.SES_SENDER_EMAIL }}
          TF_VAR_website_bucket_name: ${{ env.WEBSITE_BUCKET_NAME }}
          TF_VAR_assign_profile_target: ${{ env.ATTACH_SSM_PROFILE }}
        run: |
          terraform destroy -auto-approve

      - name: Post-destroy note
        if: ${{ github.event.inputs.ACTION == 'destroy' }}
        shell: bash
        run: |
          echo "Terraform resources destroyed."
          echo "State remains in s3://$BACKEND_BUCKET/state/terraform.tfstate and locks in DynamoDB table: $BACKEND_TABLE."
