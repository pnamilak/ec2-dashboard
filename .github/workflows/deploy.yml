name: Deploy/Destroy EC2 Dashboard

on:
  workflow_dispatch:
    inputs:
      ACTION:
        description: "Choose 'deploy' to apply or 'destroy' to tear down"
        required: true
        default: "deploy"
        type: choice
        options:
          - deploy
          - destroy
      ENVIRONMENT:
        description: "GitHub Environment name (must exist)"
        required: true
        default: "mypersonalAWS"
      AWS_REGION:
        description: "AWS Region"
        required: true
        default: "us-east-2"
      WEBSITE_BUCKET_NAME:
        description: "(Optional) S3 bucket name for site (blank to auto-generate)"
        required: false
        default: ""
      ALLOWED_EMAIL_DOMAIN:
        description: "Allowed email domain for OTP/login (deploy only)"
        required: false
        default: "gmail.com"
      SES_SENDER_EMAIL:
        description: "SES verified sender address (deploy only)"
        required: false
        default: "noreplyzingamazigle@gmail.com"

jobs:
  run:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=env/${{ inputs.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ inputs.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      # -------------------- DEPLOY PATH --------------------
      - name: Terraform Apply (deploy)
        if: ${{ inputs.ACTION == 'deploy' }}
        env:
          TF_VAR_aws_region: ${{ inputs.AWS_REGION }}
          TF_VAR_allowed_email_domain: ${{ inputs.ALLOWED_EMAIL_DOMAIN }}
          TF_VAR_ses_sender_email: ${{ inputs.SES_SENDER_EMAIL }}
          TF_VAR_website_bucket_name: ${{ inputs.WEBSITE_BUCKET_NAME }}
        run: terraform apply -auto-approve

      - name: Capture outputs (deploy)
        if: ${{ inputs.ACTION == 'deploy' }}
        id: out
        run: |
          # Some outputs may not exist yet on the first run; ignore errors safely
          set +e
          terraform output -raw api_endpoint     > .api.txt     2>/dev/null || true
          terraform output -raw cloudfront_domain> .cf.txt      2>/dev/null || true
          terraform output -raw site_bucket      > .site.txt    2>/dev/null || true
          terraform output -raw cloudfront_id    > .cfid.txt    2>/dev/null || true
          set -e
          echo "api=$(cat .api.txt  || true)"   >> $GITHUB_OUTPUT
          echo "cf=$(cat .cf.txt    || true)"   >> $GITHUB_OUTPUT
          echo "site=$(cat .site.txt|| true)"   >> $GITHUB_OUTPUT
          echo "cfid=$(cat .cfid.txt|| true)"   >> $GITHUB_OUTPUT

      - name: Build site (template API + domain) (deploy)
        if: ${{ inputs.ACTION == 'deploy' }}
        run: |
          mkdir -p dist
          cp -r html/* dist/
          sed -i "s|\${api_base_url}|${{ steps.out.outputs.api }}|g" dist/index.html.tpl
          sed -i "s|\${api_base_url}|${{ steps.out.outputs.api }}|g" dist/login.html
          sed -i "s|\${allowed_email_domain}|${{ inputs.ALLOWED_EMAIL_DOMAIN }}|g" dist/index.html.tpl
          mv dist/index.html.tpl dist/index.html

      - name: Upload to S3 (deploy)
        if: ${{ inputs.ACTION == 'deploy' }}
        run: aws s3 sync dist s3://${{ steps.out.outputs.site }} --delete --acl private

      - name: Invalidate CloudFront cache (deploy)
        if: ${{ inputs.ACTION == 'deploy' && steps.out.outputs.cfid != '' }}
        run: aws cloudfront create-invalidation --distribution-id "${{ steps.out.outputs.cfid }}" --paths "/*"

      - name: Summary (deploy)
        if: ${{ inputs.ACTION == 'deploy' }}
        run: |
          echo "CloudFront URL: https://${{ steps.out.outputs.cf }}"
          echo "API Base URL:  ${{ steps.out.outputs.api }}"
          echo "Site Bucket:   ${{ steps.out.outputs.site }}"

      # -------------------- DESTROY PATH --------------------
      - name: Try to capture outputs (destroy)
        if: ${{ inputs.ACTION == 'destroy' }}
        id: destroy_out
        continue-on-error: true
        run: |
          set +e
          terraform output -raw site_bucket   > .site.txt 2>/dev/null || true
          terraform output -raw cloudfront_id > .cfid.txt 2>/dev/null || true
          terraform output -raw api_endpoint  > .api.txt  2>/dev/null || true
          terraform output -raw cloudfront_domain > .cf.txt 2>/dev/null || true
          set -e
          echo "site=$(cat .site.txt  || true)"  >> $GITHUB_OUTPUT
          echo "cfid=$(cat .cfid.txt  || true)"  >> $GITHUB_OUTPUT
          echo "api=$(cat .api.txt    || true)"  >> $GITHUB_OUTPUT
          echo "cf=$(cat .cf.txt      || true)"  >> $GITHUB_OUTPUT

      - name: Empty website bucket (destroy â€“ safe/optional)
        if: ${{ inputs.ACTION == 'destroy' && steps.destroy_out.outputs.site != '' }}
        continue-on-error: true
        run: |
          echo "Emptying bucket s3://${{ steps.destroy_out.outputs.site }} if it exists..."
          aws s3 rm s3://${{ steps.destroy_out.outputs.site }} --recursive || true

      # Note: You don't need to disable CF manually; Terraform will handle deletion order.
      # If you kept any out-of-band objects or policies, removing them above avoids blockers.

      - name: Terraform Destroy
        if: ${{ inputs.ACTION == 'destroy' }}
        env:
          TF_VAR_aws_region: ${{ inputs.AWS_REGION }}
          TF_VAR_allowed_email_domain: ${{ inputs.ALLOWED_EMAIL_DOMAIN }}
          TF_VAR_ses_sender_email: ${{ inputs.SES_SENDER_EMAIL }}
          TF_VAR_website_bucket_name: ${{ inputs.WEBSITE_BUCKET_NAME }}
        run: terraform destroy -auto-approve

      - name: Summary (destroy)
        if: ${{ inputs.ACTION == 'destroy' }}
        run: |
          echo "Destroy requested. If you see errors, check:"
          echo "1) S3 bucket emptied (done above)"
          echo "2) SES identities (these are external to TF if you created them manually)"
          echo "3) State backend (left intact by design)"
