name: Provision Windows Fleet

on:
  workflow_dispatch:
    inputs:
        
      instance_prefix:
        description: "Name prefix (e.g. naqa1-win2022-)"
        type: string
        default: "naqa1-win2022-"
      instance_count:
        description: "How many instances"
        type: number
        default: 10
      environment:
        description: "Environment tag"
        type: string
        default: ""
      key_name:
        description: "Existing EC2 key pair name"
        type: string
        required: true
      subnet_id:
        description: "Subnet ID"
        type: string
        required: true
      security_group_ids_csv:
        description: "Comma-separated SG IDs (optional)"
        type: string
        default: ""
      instance_type:
        description: "EC2 type"
        type: string
        default: "t2.medium"
      root_volume_size:
        description: "Root volume size (GiB)"
        type: number
        default: 50
      endpoints_json:
        description: >-
          Optional JSON for SSM VPC endpoints:
          {"create_ssm_endpoints":true,"vpc_id":"vpc-...","private_subnet_ids_csv":"subnet-a,subnet-b","endpoint_sg_id":"sg-..."}
        type: string
        default: ""

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: fleet   # <--- change if your folder is elsewhere
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Parse optional endpoints config
        id: ep
        shell: bash
        run: |
          J='${{ inputs.endpoints_json }}'
          if [ -z "$J" ]; then
            echo "create=false"        >> $GITHUB_OUTPUT
            echo "vpc_id="             >> $GITHUB_OUTPUT
            echo "subnets="            >> $GITHUB_OUTPUT
            echo "sg_id="              >> $GITHUB_OUTPUT
          else
            CREATE=$(echo "$J" | jq -r '.create_ssm_endpoints // false')
            VPCID=$(echo "$J" | jq -r '.vpc_id // ""')
            SUBS=$(echo "$J" | jq -r '.private_subnet_ids_csv // ""')
            SGID=$(echo "$J" | jq -r '.endpoint_sg_id // ""')
            echo "create=$CREATE"      >> $GITHUB_OUTPUT
            echo "vpc_id=$VPCID"       >> $GITHUB_OUTPUT
            echo "subnets=$SUBS"       >> $GITHUB_OUTPUT
            echo "sg_id=$SGID"         >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var key_name="${{ inputs.key_name }}" \
            -var subnet_id="${{ inputs.subnet_id }}" \
            -var security_group_ids_csv="${{ inputs.security_group_ids_csv }}" \
            -var instance_prefix="${{ inputs.instance_prefix }}" \
            -var instance_count=${{ inputs.instance_count }} \
            -var environment="${{ inputs.environment }}" \
            -var instance_type="${{ inputs.instance_type }}" \
            -var root_volume_size=${{ inputs.root_volume_size }} \
            -var create_ssm_endpoints=${{ steps.ep.outputs.create }} \
            -var vpc_id="${{ steps.ep.outputs.vpc_id }}" \
            -var private_subnet_ids_csv="${{ steps.ep.outputs.subnets }}" \
            -var endpoint_sg_id="${{ steps.ep.outputs.sg_id }}"

      - name: Show Outputs
        run: |
          terraform output -json > tf_outputs.json
          echo "## Windows Fleet" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Names â†’ IDs**" >> $GITHUB_STEP_SUMMARY
          jq -r '.name_to_id | to_entries[] | "- \(.key): `\(.value)`"' tf_outputs.json >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Public DNS**" >> $GITHUB_STEP_SUMMARY
          jq -r '.public_dns[] | "- \(. )"' tf_outputs.json >> $GITHUB_STEP_SUMMARY
